// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Notebook {

  /// <summary>Holder for reflection information generated from notes.proto</summary>
  public static partial class NotesReflection {

    #region Descriptor
    /// <summary>File descriptor for notes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NotesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgtub3Rlcy5wcm90byJOCgROb3RlEg0KBXRpdGxlGAEgASgJEg8KB21lc3Nh",
            "Z2UYAiABKAkSEgoKY3JlYXRlRGF0ZRgDIAEoCRISCgp1cGRhdGVEYXRlGAQg",
            "ASgJIiAKCEFyY2hpZXZlEhQKBU5vdGVzGAEgAygLMgUuTm90ZUILqgIITm90",
            "ZWJvb2tiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Notebook.Note), global::Notebook.Note.Parser, new[]{ "Title", "Message", "CreateDate", "UpdateDate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Notebook.Archieve), global::Notebook.Archieve.Parser, new[]{ "Notes" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///  [START messages]
  /// </summary>
  public sealed partial class Note : pb::IMessage<Note> {
    private static readonly pb::MessageParser<Note> _parser = new pb::MessageParser<Note>(() => new Note());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Note> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Notebook.NotesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note(Note other) : this() {
      title_ = other.title_;
      message_ = other.message_;
      createDate_ = other.createDate_;
      updateDate_ = other.updateDate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Note Clone() {
      return new Note(this);
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 1;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "createDate" field.</summary>
    public const int CreateDateFieldNumber = 3;
    private string createDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CreateDate {
      get { return createDate_; }
      set {
        createDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "updateDate" field.</summary>
    public const int UpdateDateFieldNumber = 4;
    private string updateDate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UpdateDate {
      get { return updateDate_; }
      set {
        updateDate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Note);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Note other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Title != other.Title) return false;
      if (Message != other.Message) return false;
      if (CreateDate != other.CreateDate) return false;
      if (UpdateDate != other.UpdateDate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (CreateDate.Length != 0) hash ^= CreateDate.GetHashCode();
      if (UpdateDate.Length != 0) hash ^= UpdateDate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Title.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Title);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Message);
      }
      if (CreateDate.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CreateDate);
      }
      if (UpdateDate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UpdateDate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (CreateDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CreateDate);
      }
      if (UpdateDate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdateDate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Note other) {
      if (other == null) {
        return;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.CreateDate.Length != 0) {
        CreateDate = other.CreateDate;
      }
      if (other.UpdateDate.Length != 0) {
        UpdateDate = other.UpdateDate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Title = input.ReadString();
            break;
          }
          case 18: {
            Message = input.ReadString();
            break;
          }
          case 26: {
            CreateDate = input.ReadString();
            break;
          }
          case 34: {
            UpdateDate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Archieve : pb::IMessage<Archieve> {
    private static readonly pb::MessageParser<Archieve> _parser = new pb::MessageParser<Archieve>(() => new Archieve());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Archieve> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Notebook.NotesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Archieve() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Archieve(Archieve other) : this() {
      notes_ = other.notes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Archieve Clone() {
      return new Archieve(this);
    }

    /// <summary>Field number for the "Notes" field.</summary>
    public const int NotesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Notebook.Note> _repeated_notes_codec
        = pb::FieldCodec.ForMessage(10, global::Notebook.Note.Parser);
    private readonly pbc::RepeatedField<global::Notebook.Note> notes_ = new pbc::RepeatedField<global::Notebook.Note>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Notebook.Note> Notes {
      get { return notes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Archieve);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Archieve other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!notes_.Equals(other.notes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= notes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      notes_.WriteTo(output, _repeated_notes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += notes_.CalculateSize(_repeated_notes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Archieve other) {
      if (other == null) {
        return;
      }
      notes_.Add(other.notes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            notes_.AddEntriesFrom(input, _repeated_notes_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
